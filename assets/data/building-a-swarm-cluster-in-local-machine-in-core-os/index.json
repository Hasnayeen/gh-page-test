{"hash":"864d20cc051c147b13ce5780cd9d2ad29106e8a7","data":{"blogPost":{"id":"d1106e1e0feec8f82d0d95e15096418f","title":"Building a Swarm Cluster in Local Machine with CoreOS","date":"May 29, 2017","content":"<p>So last week I built a cluster on my local machine with docker swarm to get a taste of clustering. I used CoreOS as operating system on all the nodes as CoreOS is a container specific os. CoreOS also has several tools themselves for cluster orchestration. In this post I’ll show you how I made the cluster on vagrant machines.</p>\n<p>First of all you should have <a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VirtualBox</a> or <a href=\"https://my.vmware.com/web/vmware/downloads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VMware</a> to run virtual machine on your host machine and you’ll also need <a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vagrant</a> for provisioning vm. VirtualBox should be running before starting our cluster. First we’ll pull CoreOS vagrant image, enter into a directory and clone the image</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token punctuation\">[</span>https://github.com/coreos/coreos-vagrant.git<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/coreos/coreos-vagrant.git<span class=\"token punctuation\">)</span> coreos\n$ <span class=\"token builtin class-name\">cd</span> coreos</code></pre>\n<p>Our cluster will have 1 master node and 3 worker node, so we need to run 4 vm. Open the Vagrantfile and find <code class=\"language-text\">$num_instances</code> and makes it value 4. All the machine is configured to have 1GB of memory, so if you want to increase or decrease the memory change the value of <code class=\"language-text\">vm_memory</code> variables.</p>\n<p>Now start all the vm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ vagrant up</code></pre>\n<p>After sometimes all the vm will be started, check all the machine are running by below command</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ vagrant status</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*89e2LQOjSxbCaaJxoKOudg.png\" alt=\"All 4 machine are running\"></p>\n<p>Now we’ll ssh into the first machine and start our swarm cluster</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ vagrant <span class=\"token function\">ssh</span> core-01 -- -A</code></pre>\n<p>To initialize the cluster we need the ip address of our machine. Run following command within the vm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ip</span> addr show</code></pre>\n<p>It’ll show a bunch of network related information. The information we’re interested are the ip address of eth1 interface.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2370/1*tt-qdwdl7FvaH-qpx-WPmA.png\" alt=\"Finding IP of our machine\"></p>\n<p>Now we’ll start the cluster, run the following command</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ docker swarm init --advertise-addr node_ip_address</code></pre>\n<p><code class=\"language-text\">--advertise-addr</code> is used to tell docker swarm which ip address other node should use to join the cluster.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*AXHsGDSvTTq-gtcAdeWTEA.png\" alt=\"Initialize swarm cluster\"></p>\n<p>So the command started the cluster and made the current machine the manager. You can see it also printed a token which other will use to join the cluster. You should keep this token secret.</p>\n<p>Now let’s add a worker node to the cluster. First ssh into the second vm</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ vagrant <span class=\"token function\">ssh</span> core-02 -- -A</code></pre>\n<p>And within the vm run following command</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ docker swarm <span class=\"token function\">join</span> --token TOKEN manager_node_ip:2377</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*HLA800M7G8pwuoVZu9UvaQ.png\" alt=\"Attaching a worker node to the cluster\"></p>\n<p>We can add the other vm as worker node in same way</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2650/1*T9FFEV2PcDgl2ApB3k8f0g.png\" alt=\"Adding 3 worker node to the cluster\"></p>\n<p>Now in the manager node we can see how many nodes are running by following command</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ docker node <span class=\"token function\">ls</span></code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2614/1*vX2-NWoAohES4BmPPvJg2Q.png\" alt=\"List all the nodes\"></p>\n<p>We can see 4 nodes are running currently, three of them as worker and a manger node. That means we have successfully started a swarm cluster of 4 nodes on our local machine.</p>\n<p>Hopefully this was helpful. Happy Coding!</p>\n"}},"context":{}}