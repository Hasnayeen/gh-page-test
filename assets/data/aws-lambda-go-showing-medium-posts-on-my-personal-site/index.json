{"hash":"864d20cc051c147b13ce5780cd9d2ad29106e8a7","data":{"blogPost":{"id":"9e2f66581c64c83d70756d9f7bdfda25","title":"AWS Lambda + Go - Showing Medium Posts on My Personal Site","date":"Apr 15, 2018","content":"<section><h2 id=\"what\"><a href=\"#what\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>What?</strong></h2><p>Showing my Medium article list on a static website using an AWS Lambda function built with Golang and the AWS API Gateway.</p></section>\n<section><h2 id=\"why\"><a href=\"#why\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>Why?</strong></h2><p>I was building a virtual homepage using GitHub pages and wanted to show the list of articles I’ve written on medium. There is no method for this in the official Medium API, but this url <a href=\"https://medium.com/@username/latest?format=json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@username/latest?format=json</a> does return a list of articles for a user in JSON format.</p><p>This provides a conventient way to retrieve the data, but CORS prevents it from being loaded in the frontend app within the browser. I could proxy this information through a server but I did not want to create and manage one for this, which is why I was using GitHub pages in the first place.</p><p>For this, AWS Lambda comes to the rescue! With AWS Lambda you can write a function in any of their supported languages. You can then upload it to the Lambda service either through CLI or the AWS browser console. There is no need to provision or manage a server. It’s also very cheap.</p></section>\n<section><h2 id=\"how\"><a href=\"#how\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><strong>How?</strong></h2><p>First we will write the function in a file locally, then we’ll create a new Lambda function and upload our local file to it. To access the Lambda function, we’ll create an AWS API Gateway APT to call from our frontend. The full file I used is below, followed by an explanation.</p><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\n\t<span class=\"token string\">\"github.com/aws/aws-lambda-go/events\"</span>\n\t<span class=\"token string\">\"github.com/aws/aws-lambda-go/lambda\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Response <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tPayload <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\tReferences <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\t\tPost <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>Postdata\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token string\">`json:\"references\"`</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token string\">`json:\"payload\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Postdata <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tID               <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"id\"`</span>\n\tTitle            <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"title\"`</span>\n\tFirstPublishedAt <span class=\"token builtin\">int64</span>  <span class=\"token string\">`json:\"firstPublishedAt\"`</span>\n\tUniqueSlug       <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"uniqueSlug\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request events<span class=\"token punctuation\">.</span>APIGatewayProxyRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>APIGatewayProxyResponse<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processing request data for request %s.\\n\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>RequestContext<span class=\"token punctuation\">.</span>RequestID<span class=\"token punctuation\">)</span>\n\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://medium.com/@searching.nehal/latest?format=json\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tbody<span class=\"token punctuation\">,</span> err2 <span class=\"token operator\">:=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err2 <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err2<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tdata <span class=\"token operator\">:=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\tconvertedData <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"])}while(1);&lt;/x>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> response Response\n\n\tjson<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>convertedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>response<span class=\"token punctuation\">)</span>\n\n\tresult<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Marshal</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>Payload<span class=\"token punctuation\">.</span>References<span class=\"token punctuation\">.</span>Post<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> events<span class=\"token punctuation\">.</span>APIGatewayProxyResponse<span class=\"token punctuation\">{</span>Body<span class=\"token punctuation\">:</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> StatusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlambda<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p>We create a file called main.go and import github.com/aws-lambda-go/events and github.com/aws-lambda-go/lambda. We define two structs, Response and Postdata, to parse data from the JSON response of our API call.</p><p>Next we define a function handler which takes two parameters: context (runtime information) and request (information about the API call from the AWS API Gateway). We return a response to send back to the API Gateway caller and an error.</p><p>Within the function we make a GET request using thenet/http library to the Medium URL (line 33) and convert it to a string (line 40). Then we remove some unwanted text using from the response by using ])}while(1);</x> (Medium adds these to avoid JSON hijacking) at line 45. Then we decode the JSON (line 49) and again encode only the part we need back to JSON (line 51). Finally, we return the response.</p><p>The main function is the entry point, and we call the Start function from the lambda package to run our handler function.</p><p>Next, we’ll build an executable binary for a linux machine GOOS=linux go build -o main main.go and zip the file zip main.zip main.</p><p>Now, let’s create the Lambda function from the AWS browser console. Once logged in, navigate to the Lambda section.</p><p><img src=\"https://cdn-images-1.medium.com/max/3770/1*XwdJJnQahNXsLxs__mhXaw.png\"></p><p>Click the “Create function” button.</p><p><img src=\"https://cdn-images-1.medium.com/max/3750/1*mT3WAh98wvXs4p4ohnWQbA.png\"></p><p>Select “Author from scratch” and enter a name for your function, selecting “Go 1.x” as your runtime. Create a new role if you don’t have an existing one, and give the role a name. Give the role “Simple Microservice permissions” in “Policy templates” and then click “Create Function.”</p><p><img src=\"https://cdn-images-1.medium.com/max/3834/1*c6fUHJCAZ-L0fROlaVHXTw.png\"></p><p>Your function will be created and moved to the “Configuration” page. In the “Configuration” page go to the “Function code” section and upload the zip file. Also provide the name main in the handler input box.</p><p><img src=\"https://cdn-images-1.medium.com/max/3254/1*io-b0gqX_2B6BD9dWcHVNQ.png\"></p><p>In the “Basic Settings” section on the same page provide a timeout for your function execution — one minute seems to be enough for this function. Lastly, save it.</p><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*0G4NZlWIy_FrAa7M9XR-vw.png\"></p><p>Now let’s create an API to call the Lambda function. Go to the “API Gateway” section and click “Create API.”</p><p><img src=\"https://cdn-images-1.medium.com/max/2532/1*q0Zqxv5BPF_nmqzoDiUcqA.png\"></p><p>Give the API a name, then click “Create API.”</p><p><img src=\"https://cdn-images-1.medium.com/max/3990/1*bbnoD5K6gxL19TKJIYYIyw.png\"></p><p>In the next page select “Create Resource” from the “Actions” dropdown.</p><p><img src=\"https://cdn-images-1.medium.com/max/4010/1*CarXyNx8bSTQPo0zPYy3tg.png\"></p><p>Give the resource a name, check the “<strong>Enable API Gateway CORS” </strong>checkbox, and create the resource.</p><p><img src=\"https://cdn-images-1.medium.com/max/3704/1*VEx_c10cfz4c7iuRDnf6EQ.png\"></p><p>Now create a GET request from the “Actions” dropdown.</p><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*uLPjTHfBQ44BHjpsYjC3xA.png\"></p><p>On the next page select “Lambda Function” as the integration type, and choose the Lambda region of your Lambda function. Provide the already created Lambda function name, then click “Save.”</p><p><img src=\"https://cdn-images-1.medium.com/max/3888/1*Obl34l0cwXzWNNnuZBHTlQ.png\"></p><p>Select OK in the permission modal.</p><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*_rvH9NqMjynD0mCLLPcq2w.png\"></p><p>Now select “Deploy API” from the “Actions” dropdown and create a new deployment stage. Give it a name and click “Deploy.”</p><p><img src=\"https://cdn-images-1.medium.com/max/2000/1*iFRYmnilVwfVQNeLZUXLMA.png\"></p><p>Navigate to the “Stages” menu and check the GET method, where you will see an “Invoke URL.” This is the URL we will use to call the Lambda function. Let’s try calling that in the browser. We should see a JSON response containing the list of posts from Medium.</p><p><img src=\"https://cdn-images-1.medium.com/max/3822/1*ybIitkFrVKvDDzolzJMJxw.png\"></p><p>From my frontend app I can call this url, parse the response to JSON, and display the posts as a list. You can check out that code <a href=\"https://github.com/Hasnayeen/src-gh-page/blob/a651950ff48772c12a53334adcfc9d3958dc210c/src/Pages/Posts/Posts.js#L33\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p><p>You can also apply authentication to this API in various ways (<a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API Gateway Lambda Authorizers</a>, <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon Cognito User Pools</a>, etc.), and you can test your Lambda function locally via <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/test-sam-local.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS SAM</a>.</p><p>I hope this article was helpful. Please provide feedback or comments if you found any errors. Subscribe to my newsletter to get notifications for new posts.</p></section>\n"}},"context":{}}